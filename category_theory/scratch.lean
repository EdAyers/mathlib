
import .category
import .functor
universes u1 u2 v1 v2

namespace category_theory
    section 
        variables 
            {C : Type u1} [ùíû : category.{u1 v1} C] 
            {D : Type u2} [ùíü : category.{u2 v2} D]
        include ùíü ùíû
        def functor_extensionality 
            (F G : C ‚Üù D) 
            (ob_eq : ‚àÄ (X : C), F X = G X) 
            (map_eq : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), (eq.rec_on (ob_eq Y) (eq.rec_on (ob_eq X) (F.map f)) : G X ‚ü∂ G Y) = (G.map f)) 
            : F = G :=
            begin
                cases F,
                cases G,
                sorry
            end
    end
end category_theory


lemma my_ext (Œ± :Type)
  (P Q : Œ± -> Type)
  (f : Œ† (a : Œ±), P a )
  (g : Œ† (a : Œ±), Q a)
  (p : ‚àÄ (a : Œ±), P a = Q a) :
    (‚àÄ (a : Œ±), (eq.rec_on (p a) (f a) : Q a) = g a)
    -> (eq.rec_on (funext p : P = Q) f : Œ† (a : Œ±), Q a) = g :=
begin
  cases (funext p : P = Q), 
  exact funext
end

#check heq

structure mystr :=
    (A : ‚Ñï)
    (B : bool)
    (p : A > 10)

theorem mystr_eq : ‚àÄ (x y : mystr) (A_eq : x.A = y.A) (B_eq : x.B = y.B), x = y
| ‚ü®xA, xB, xp‚ü© ‚ü®_, _, _‚ü© rfl rfl := by sorry


