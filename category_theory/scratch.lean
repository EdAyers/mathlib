
import .category
import .functor
universes u1 u2 v1 v2

namespace category_theory
    section 
        variables 
            {C : Type u1} [ùíû : category.{u1 v1} C] 
            {D : Type u2} [ùíü : category.{u2 v2} D]
        include ùíü ùíû

        section
        lemma functor_eq : ‚àÄ (F G : C ‚Üù D) (obj_eq : F.obj = G.obj) (map_eq : (eq.rec_on obj_eq F.map : (Œ† {X Y : C}, (X ‚ü∂ Y) -> (G.obj X ‚ü∂ G.obj Y))) = G.map), F = G
        | ‚ü®F_obj, F_map, _, _ ‚ü© ‚ü® _, _ , _ , _ ‚ü© rfl rfl := rfl        
        lemma functor_extensionality : 
            ‚àÄ   (F G : C ‚Üù D) 
                (ob_eq : ‚àÄ (X : C), F.obj X = G.obj X) 
                (map_eq : ‚àÄ (X Y : C) (f : X ‚ü∂ Y), ((eq.rec_on (funext ob_eq : F.obj = G.obj) (F.map)): (Œ† {X Y}, (X ‚ü∂ Y) -> (G.obj X ‚ü∂ G.obj Y))) f = (G.map f)), F = G
            | F G ob_eq map_eq := functor_eq F G (funext ob_eq) (funext (Œª X, funext (Œª Y, funext (Œª f, map_eq X Y f))))
        end
    end
end category_theory


section
structure str2 :=
    (A : ‚Ñï -> Type)
    (B : Œ† {a : ‚Ñï} , A a)
lemma str2_ext : ‚àÄ (x y : str2) (A_eq : x.A = y.A) (B_eq : (eq.rec_on A_eq x.B : (Œ† a : ‚Ñï , y.A a) ) = y.B), x = y
| ‚ü®xA, xB‚ü© ‚ü®_, _‚ü© rfl rfl := rfl
end


lemma my_ext (Œ± :Type)
  (P Q : Œ± -> Type)
  (f : Œ† (a : Œ±), P a )
  (g : Œ† (a : Œ±), Q a)
  (p : ‚àÄ (a : Œ±), P a = Q a) :
    (‚àÄ (a : Œ±), (eq.rec_on (p a) (f a) : Q a) = g a)
    -> (eq.rec_on (funext p : P = Q) f : Œ† (a : Œ±), Q a) = g :=
begin
  cases (funext p : P = Q), 
  exact funext
end

#check heq

structure mystr :=
    (A : ‚Ñï)
    (B : bool)
    (p : A > 10)

theorem mystr_eq : ‚àÄ (x y : mystr) (A_eq : x.A = y.A) (B_eq : x.B = y.B), x = y
| ‚ü®xA, xB, xp‚ü© ‚ü®_, _, _‚ü© rfl rfl := rfl

